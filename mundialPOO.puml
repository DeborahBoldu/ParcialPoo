@startuml
abstract class mundial.EtapaMundial {
# String descripcionEtapa
# List<Partido> partidos
+ String getDescripcionEtapa()
+ void addPartido(Partido)
+ List<Partido> getPartidos()
+ List<String> getResumenResultados()
+ {abstract}List<Equipo> getEquiposQueAvanzan()
+ String toString()
}


class mundial.Grupo {
+ void generarFixture(List<Equipo>,Date)
+ List<Equipo> getEquiposQueAvanzan()
}


class mundial.Llave {
+ List<Equipo> getEquiposQueAvanzan()
}

class mundial.Resultado {
- int golesLocal
- int golesVisitante
+ int getGolesLocal()
+ int getGolesVisitante()
+ boolean ganoLocal()
+ boolean ganoVisitante()
+ boolean empate()
+ String toString()
}



class mundial.Equipo {
- String nombre
- List<Partido> partidosJugados
+ String getNombre()
+ void setNombre(String)
+ void addPartido(Partido)
+ List<Partido> getPartidosJugados()
+ boolean equals(Object)
+ int hashCode()
+ String toString()
}


class mundial.Partido {
- Date fecha
- Equipo local
- Equipo visitante
- Resultado resultado
+ Date getFecha()
+ Equipo getLocal()
+ Equipo getVisitante()
+ Resultado getResultado()
+ void setResultado(Resultado)
+ String toString()
}


class mundial.Main {
+ {static} void main(String[])
- {static} void octavosCuartosSemisFinal(List<Equipo>,Random)
- {static} void prepararLlaveConPenales(Llave,List<Equipo>,Date,Random)
- {static} void mostrarEtapa(EtapaMundial)
}



mundial.EtapaMundial <|-- mundial.Grupo
mundial.EtapaMundial <|-- mundial.Llave


@enduml